// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisitorBook.DAL.Data;

#nullable disable

namespace VisitorBook.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240116133643_seeding_db")]
    partial class seeding_db
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.UserManagement.View",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.UserManagement.Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.UserManagement.Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.UserManagement.Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.PlaceManagement.View",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.PlaceManagement.Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.PlaceManagement.Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.PlaceManagement.Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.View",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.FakeDataManagement.View",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.FakeDataManagement.Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.FakeDataManagement.Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.FakeDataManagement.Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ContactMessageManagement.View",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ContactMessageManagement.Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ContactMessageManagement.Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ContactMessageManagement.Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.AuditTrailManagement.View",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.AuditTrailManagement.Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.AuditTrailManagement.Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.AuditTrailManagement.Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.RegisterApplicationManagement.View",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.RegisterApplicationManagement.Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.RegisterApplicationManagement.Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.RegisterApplicationManagement.Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ExceptionLogManagement.View",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ExceptionLogManagement.Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ExceptionLogManagement.Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ExceptionLogManagement.Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.PlaceManagement.View",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.PlaceManagement.Create",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.PlaceManagement.Edit",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.PlaceManagement.Delete",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.View",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.Create",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.Edit",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.Delete",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ContactMessageManagement.View",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ContactMessageManagement.Create",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ContactMessageManagement.Edit",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ContactMessageManagement.Delete",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.AuditTrailManagement.View",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.AuditTrailManagement.Create",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.AuditTrailManagement.Edit",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.AuditTrailManagement.Delete",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 49,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.RegisterApplicationManagement.View",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 50,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.RegisterApplicationManagement.Create",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 51,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.RegisterApplicationManagement.Edit",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 52,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.RegisterApplicationManagement.Delete",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 53,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ExceptionLogManagement.View",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 54,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ExceptionLogManagement.Create",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 55,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ExceptionLogManagement.Edit",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 56,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.ExceptionLogManagement.Delete",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 57,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.View",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 58,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.Create",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 59,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.Edit",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 60,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.Delete",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 61,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.View",
                            RoleId = 4
                        },
                        new
                        {
                            Id = 62,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.Create",
                            RoleId = 4
                        },
                        new
                        {
                            Id = 63,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.Edit",
                            RoleId = 4
                        },
                        new
                        {
                            Id = 64,
                            ClaimType = "Permission",
                            ClaimValue = "Permissions.VisitedCountyManagement.Delete",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.AuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "06",
                            CountryId = 1,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3039),
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 2,
                            Code = "35",
                            CountryId = 1,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3042),
                            Name = "İzmir"
                        },
                        new
                        {
                            Id = 3,
                            Code = "34",
                            CountryId = 1,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3043),
                            Name = "İstanbul"
                        });
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SubRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubRegionId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "TUR",
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3002),
                            Name = "Turkey",
                            SubRegionId = 1
                        });
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Counties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3168),
                            Latitude = 39.796688099999997,
                            Longitude = 32.223354700000002,
                            Name = "Çankaya"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3172),
                            Latitude = 39.905137199999999,
                            Longitude = 32.692093999999997,
                            Name = "Mamak"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3174),
                            Latitude = 40.086525000000002,
                            Longitude = 32.820312000000001,
                            Name = "Keçiören"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3175),
                            Latitude = 38.422052700000002,
                            Longitude = 26.964354,
                            Name = "Konak"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 2,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3177),
                            Latitude = 38.478544100000001,
                            Longitude = 27.075009600000001,
                            Name = "Bayraklı"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 2,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3178),
                            Latitude = 38.5013997,
                            Longitude = 26.96218,
                            Name = "Karşıyaka"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 3,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3180),
                            Latitude = 40.9812333,
                            Longitude = 28.980652599999999,
                            Name = "Kadıköy"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 3,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3181),
                            Latitude = 40.984420299999996,
                            Longitude = 28.974454399999999,
                            Name = "Ataşehir"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 3,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(3183),
                            Latitude = 41.024865200000001,
                            Longitude = 28.637796699999999,
                            Name = "Avcılar"
                        });
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.ExceptionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExceptionLogs");
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(2290),
                            Name = "Asia"
                        });
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.RegisterApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RegisterApplications");
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VisitorRecorder",
                            NormalizedName = "VISITORRECORDER"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        });
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.SubRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("SubRegions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 16, 16, 36, 43, 623, DateTimeKind.Local).AddTicks(2957),
                            Name = "Western Asia",
                            RegionId = 1
                        });
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 11, 2, 11, 34, 55, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5d9f6482-4ba7-4345-ad60-9f97e03222b8",
                            Email = "ozcaneren@gmail.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            LockoutEnabled = true,
                            Name = "Eren",
                            NormalizedEmail = "OZCANEREN@GMAIL.COM",
                            NormalizedUserName = "ERENOZCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAED5jrSTAsrG4lBYx0bhM7fBiSUWqn07370xX5pAni6ieB2FxI8hfaCEuHM4W5v67PQ==",
                            PhoneNumber = "(555) 555-5555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bd6de21-150e-48e9-b08a-4a8d612e7e4a",
                            Surname = "Özcan",
                            TwoFactorEnabled = false,
                            UserName = "erenozcan"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1996, 8, 22, 1, 32, 50, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "73b78b06-e407-4eaa-a30b-da8c7c7b81bb",
                            Email = "ceydakamis@gmail.com",
                            EmailConfirmed = true,
                            Gender = 1,
                            LockoutEnabled = true,
                            Name = "Ceyda",
                            NormalizedEmail = "CEYDAKAMIS@GMAIL.COM",
                            NormalizedUserName = "CEYDAKAMIS",
                            PasswordHash = "AQAAAAIAAYagAAAAEKDg/e1fWu9B1U9H8d0KCP45Dj/wS7o0DhDDXK9gqm7DcHvj2V54vL6JDq3W0k/lAA==",
                            PhoneNumber = "(555) 555-5555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41d7c224-6487-4768-9ccf-eb18fbec9a02",
                            Surname = "Kamış",
                            TwoFactorEnabled = false,
                            UserName = "ceydakamis"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1985, 4, 20, 1, 33, 10, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "06a8de45-1669-4a4e-8e32-da9bf7f21394",
                            Email = "aliveli@gmail.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            LockoutEnabled = true,
                            Name = "Ali",
                            NormalizedEmail = "ALIVELI@GMAIL.COM",
                            NormalizedUserName = "ALIVELI",
                            PasswordHash = "AQAAAAIAAYagAAAAECIAttjDoddQ+qSy4NOaiKI/ADQlUmUtT6xIhlNJchbn799kpHW+HkP/Yp9Jsc6Yiw==",
                            PhoneNumber = "(555) 555-5555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd97713d-9e08-4a3e-a501-21653f503ea8",
                            Surname = "Veli",
                            TwoFactorEnabled = false,
                            UserName = "aliveli"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1988, 11, 20, 11, 37, 20, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2132784d-e560-4c5e-9914-c1141d76de3e",
                            Email = "sekserenay@gmail.com",
                            EmailConfirmed = true,
                            Gender = 1,
                            LockoutEnabled = true,
                            Name = "Serenay",
                            NormalizedEmail = "SEKSERENAY@GMAIL.COM",
                            NormalizedUserName = "SEKSERENAY",
                            PasswordHash = "AQAAAAIAAYagAAAAEBdobkSjOOe20Pq6efjjiZqnPlNinyHRV5v7zBbfK3kgKq7ONySbJbAQuXa2DpJERg==",
                            PhoneNumber = "(555) 555-5555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d811d66c-91ab-4324-801a-63a003ea21b6",
                            Surname = "Sek",
                            TwoFactorEnabled = false,
                            UserName = "sekserenay"
                        });
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserAddress");
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.VisitedCounty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.HasIndex("UserId");

                    b.ToTable("VisitedCounties");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("VisitorBook.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("VisitorBook.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("VisitorBook.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("VisitorBook.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisitorBook.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("VisitorBook.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.City", b =>
                {
                    b.HasOne("VisitorBook.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.Country", b =>
                {
                    b.HasOne("VisitorBook.Core.Entities.SubRegion", "SubRegion")
                        .WithMany()
                        .HasForeignKey("SubRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubRegion");
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.County", b =>
                {
                    b.HasOne("VisitorBook.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.RegisterApplication", b =>
                {
                    b.HasOne("VisitorBook.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.SubRegion", b =>
                {
                    b.HasOne("VisitorBook.Core.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.UserAddress", b =>
                {
                    b.HasOne("VisitorBook.Core.Entities.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisitorBook.Core.Entities.User", "User")
                        .WithOne("UserAddress")
                        .HasForeignKey("VisitorBook.Core.Entities.UserAddress", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.VisitedCounty", b =>
                {
                    b.HasOne("VisitorBook.Core.Entities.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisitorBook.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisitorBook.Core.Entities.User", b =>
                {
                    b.Navigation("UserAddress");
                });
#pragma warning restore 612, 618
        }
    }
}
